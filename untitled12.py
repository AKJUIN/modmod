# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11TqnvncPWjmf-gKGnmm9ualu11l30aOu
"""

#@title Upload Word Files { display-mode: "form" }
import pandas as pd
from docx import Document
from google.colab import files
import ipywidgets as widgets
from IPython.display import display, clear_output

# Define widgets for file upload
upload_widget = widgets.FileUpload(accept=".docx", multiple=True)

# Display the upload widget
display(upload_widget)

#@title Process Uploaded Files { display-mode: "form" }
# Function to extract moderation data from Word files
def extract_moderation_data(file):
    doc = Document(file)
    content = "\n".join([p.text for p in doc.paragraphs if p.text.strip()])
    module_code = extract_field(content, "Module code and name")
    module_name = extract_field(content, "Module coordinator name")
    problem_identified = "Y" if "Problem identified?" in content.lower() and "yes" in content.lower() else "N"
    problem_details = extract_field(content, "Details on problems identified during assessment moderation")
    actions_taken = extract_field(content, "Action taken")
    return {
        "Module Code": module_code,
        "Module Name": module_name,
        "Problem Identified": problem_identified,
        "Problem Details": problem_details,
        "Actions Taken": actions_taken,
    }

# Helper function to extract specific fields
def extract_field(content, field_name):
    start = content.lower().find(field_name.lower())
    if start == -1:
        return None
    start += len(field_name)
    end = content[start:].find("\n")
    return content[start : start + end].strip() if end != -1 else content[start:].strip()

# Define output area for displaying results
output_area = widgets.Output()

# Button to process files
process_button = widgets.Button(description="Process Files")

def process_files(change):
    with output_area:
        clear_output()  # Clear previous output
        if not upload_widget.value:
            print("No files uploaded. Please upload files first!")
            return
        data = []
        for filename, fileinfo in upload_widget.value.items():
            extracted_data = extract_moderation_data(fileinfo["content"])
            data.append(extracted_data)
        global df  # Save DataFrame globally for download
        df = pd.DataFrame(data)
        display(df)  # Display the extracted data
        print("Processing complete. You can now download the results.")

# Attach the button's click event
process_button.on_click(process_files)

# Display widgets
display(process_button)
display(output_area)

#@title Download Processed Data { display-mode: "form" }
# Button to download the processed Excel file
download_button = widgets.Button(description="Download Excel")

def download_files(change):
    if "df" in globals():
        df.to_excel("Moderation_Data.xlsx", index=False)
        files.download("Moderation_Data.xlsx")
    else:
        print("No processed data available. Please process files first!")

# Attach the button's click event
download_button.on_click(download_files)

# Display the download button
display(download_button)