import streamlit as st
import pandas as pd
from docx import Document
import io
from openpyxl import Workbook
from openpyxl.styles import Alignment

# Function: Extract data from a Word document
def extract_data_from_docx(file):
    """
    Extracts module name, code, and problems identified along with actions taken from a Word document.
    
    :param file: File-like object representing the .docx file.
    :return: List of dictionaries containing extracted data.
    """
    # Load the document
    doc = Document(file)

    # Initialize variables
    module_code = None
    module_name = None
    extracted_data = []

    # Extract text from tables
    for table in doc.tables:
        for row in table.rows:
            cells = [cell.text.strip() for cell in row.cells]
            
            # Find Module Code and Name
            if len(cells) > 1 and "module code and name" in cells[0].lower():
                module_code = cells[1].split(" ")[0]  # Extract module code
                module_name = " ".join(cells[1].split(" ")[1:])  # Extract module name

            # Check for "Problem Identified" and "Action Taken"
            if len(cells) > 2 and "problem identified" in cells[0].lower():
                problem_text = cells[1] if "yes" in cells[1].lower() else None
                action_text = cells[2] if cells[2] else None
                
                # Add to extracted data if a problem was identified
                if problem_text and action_text:
                    extracted_data.append({
                        "Module Code": module_code,
                        "Module Name": module_name,
                        "Problem Identified": problem_text,
                        "Action Taken": action_text
                    })

    return extracted_data

# Function: Save data to Excel
def save_data_to_excel(df):
    """
    Save extracted data to an Excel file with basic formatting.
    """
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="Extracted Data")
        worksheet = writer.sheets["Extracted Data"]

        # Format columns and rows
        for col in worksheet.columns:
            max_length = max(len(str(cell.value or "")) for cell in col)
            col_letter = col[0].column_letter
            worksheet.column_dimensions[col_letter].width = max(max_length + 2, 10)

        for row in worksheet.iter_rows():
            for cell in row:
                cell.alignment = Alignment(wrap_text=True)
    return output.getvalue()

# Streamlit App
st.title("Document Data Extractor")

# Sidebar Navigation
menu = st.sidebar.radio("Navigation", ["Extract Data"])

if menu == "Extract Data":
    st.header("Extract Data from Documents")
    uploaded_files = st.file_uploader("Upload .docx files", type=["docx"], accept_multiple_files=True)

    if uploaded_files:
        extracted_data = []
        for file in uploaded_files:
            extracted_data.extend(extract_data_from_docx(file))

        if extracted_data:
            # Convert to DataFrame
            df = pd.DataFrame(extracted_data)
            
            # Display DataFrame
            st.write("### Extracted Data")
            st.dataframe(df)

            # Allow download of extracted data
            excel_data = save_data_to_excel(df)
            st.download_button(
                label="Download Extracted Data as Excel",
                data=excel_data,
                file_name="extracted_data.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        else:
            st.warning("No data extracted. Please check the uploaded documents.")
